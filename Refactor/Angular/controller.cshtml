@model Refactor.Angular.ControllerViewModel
(function() {
    'use strict';

    angular
        .module('app.@Model.Area')
        .controller('@(Model.CamelCaseName)Controller', @(Model.CamelCaseName)Controller);

    @(Model.CamelCaseName)Controller.$inject = ['@(Model.ServiceName)', 'serverSideData', 'keyCodes'];

    //serverSideData is an angular constant that represents the data on the current page coming from the server
    //it usually includes the model values from the razor template that was used to render the page
    //it is a way for the server to communicate with javascript before rendering occurs
    function @(Model.CamelCaseName)Controller(@(Model.ServiceName), serverSideData, keyCodes) {
        //We do this as a result of the guidance of the style guide
        var vm = this,
            pageSize = 6;

        //These are the default properties that we expose on controllers by convention
        vm.state = {
            loading: true,
            error: false,
            errorData: {}
        };
        vm.response = {
            count: 0,
            results: []
        };
        vm.request = {
            skip: 0,
            take: pageSize,
            filter: {}
        };
        vm.loadData = loadData;
        vm.keypress = keypress;

        init();

        function init() {
            //If the server has provided state we can ensure that this will be used when the first call is made
            if (serverSideData && serverSideData.filter) {
                vm.request.filter = serverSideData.filter;
            }

            loadData(vm.request);
        }

        function keypress(event) {
            if (event.keyCode === keyCodes.enter) {
                loadData(vm.request);
            }
        }

        //The main function that calls the backend Web-API service 
        function loadData(request) {
            if (!request) {
                request = {
                    skip: 0,
                    take: pageSize,
                    filter: {}
                };
            }
            vm.request = request;
            vm.state.loading = true;

            //The getRequirements method of the dataservice will call the web api passing in the request object 
            return @(Model.ServiceName).@(Model.ServiceMethod)(request)
                .then(
                    //If the call was successfull we get in here
                    function(response) {
                        vm.response = response.data;
                        vm.state.loading = false;
                    },
                    //If the call failed we get in here
                    function(reason) {
                        vm.state.loading = false;
                        vm.state.error = true;
                        vm.state.errorData = reason;
                    });
        }
    }
})();